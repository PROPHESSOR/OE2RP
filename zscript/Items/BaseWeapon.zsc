/**
 * Copyright (c) OE2RP Team, 2021
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

class OE2BaseWeapon: DoomWeapon abstract {
	Sound meleeHitSound, meleeWoodHitSound, meleeMetalHitSound;
	Sound meleeMissSound;

	Property HitSound: meleeHitSound;
	Property WoodHitSound: meleeWoodHitSound;
	Property MetalHitSound: meleeMetalHitSound;
	Property MissSound: meleeMissSound;

	Default {
		Inventory.PickupMessage "Picked up a O&E II base weapon.";
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
		Scale OE2ScaleFactor;

		OE2BaseWeapon.HitSound "";
		OE2BaseWeapon.MissSound "";
	}


	// === Attack codepointers:

	// O&E2RP close-range weapon damage.
	action void A_OE2RP_WeaponMelee( int basedamage, name damagetype = 'None', int flags = 0 ) {
		OE2BaseWeapon thisweap = OE2BaseWeapon( invoker );

		// Here must be a calculating based on the player characteristics:
		int realDamage = basedamage;

		// Don't sure where "WoodHitSound" and "MetalHitSound" must be calculated:
		//according to the FTranslatedLineTarget or to the LineTrace check.
		// First is slightly faster, but can be used only with actors.
		// Second is much more universal and may also handle lines, sectors etc.

		A_CustomPunch( realDamage, true, flags, "None", radius + 48, meleesound: thisweap.meleeHitSound, misssound: thisweap.meleeMissSound );
	}

	// O&E2RP projectile launch.
	action void A_OE2RP_WeaponMissile( class<Actor> projectile ) {
		//OE2BaseWeapon thisweap = OE2BaseWeapon( invoker );

		// Here must be a calculating based on the player characteristics:
		double realAngle = 0;
		double realPitch = 0;

		A_FireProjectile( projectile, realAngle, true, flags: FPF_NOAUTOAIM, pitch: realPitch );
	}

	// O&E2RP long-range weapon damage.
	action void A_OE2RP_WeaponHitscan( class<OE2HitscanActor> hitscanClass ) {
		// Here must be a calculating based on the player characteristics:
		double spreadStrength = 3.0;
		int rangeBlocks = 3;

		readonly<OE2HitscanActor> cls = GetDefaultByType( hitscanClass );

		//A_FireBullets(double spread_xy, double spread_z, int numbullets, int damageperbullet, class<Actor> pufftype = "BulletPuff", int flags = 1, double range = 0, class<Actor> missile = null, double Spawnheight = 32, double Spawnofs_xy = 0);
		A_FireBullets( spreadStrength, spreadStrength, -1, cls.hitscanDamage, hitscanClass, 0, 64 * rangeBlocks );
	}



	// === On hit/on kill codepointers:

	// Clear all successful player hit/kill counters.
	action void A_OE2RP_ClearSuccessfulHits( void ) {
		TakeInventory( "OE2PlayerSuccessfulHit", 0xFFFF );
		TakeInventory( "OE2PlayerSuccessfulKill", 0xFFFF );
	}

	// Go to state if the last hit is successful.
	action State A_OE2RP_JumpIfSuccessfulHit( StateLabel onHit, StateLabel onKill = NULL ) {
		StateLabel outState = NULL;

		if ( FindInventory( "OE2PlayerSuccessfulKill" ) && onKill != NULL )
			outState = onKill;
		else if ( FindInventory( "OE2PlayerSuccessfulHit" ) )
			outState = onHit;

		if ( outState )
			A_OE2RP_ClearSuccessfulHits();

		return ResolveState( outState );
	}

	// Call ACS if the last hit is successful.
	action void A_OE2RP_CallACSIfSuccessfulHit( String scriptname, int arg1 = 0, int arg2 = 0, int arg3 = 0, bool onKillOnly = false ) {
		if ( FindInventory( "OE2PlayerSuccessfulHit" ) && !onKillOnly || FindInventory( "OE2PlayerSuccessfulKill" ) )
			CallACS( scriptname, arg1, arg2, arg3 );

		A_OE2RP_ClearSuccessfulHits();
	}




	// === Checks:

	// Jumps to a state when something (actor, line, floor, ceiling) is blocking a ray within range:
	action State A_OE2RP_JumpIfLinetraceBlock( double range, StateLabel onBlock ) {
		FLineTraceData lt;
		LineTrace( angle, range, pitch, TRF_NOSKY, player.viewheight, data: lt );

		bool blocked = lt.HitType != TRACE_HitNone && lt.HitType != TRACE_CrossingPortal;

		return blocked? ResolveState( onBlock ) : NULL;
	}

	// === Cannot extend class in the Decorate file, so there are extra codepointers:

	action void A_OE2RP_SendBob( void ) {
	}

	action void A_OE2RP_Massacre( bool absolute = false ) {
		ThinkerIterator it = ThinkerIterator.Create( "Actor" );

		for ( Actor cur = Actor( it.Next() ); cur != NULL; cur = Actor( it.Next() ) ) {
			if ( cur.bISMONSTER )
				cur.DamageMobj( NULL, NULL, LARGE_MASS, 'None' );
		}

		if ( absolute ) {
			for ( int i = 0; i < MAXPLAYERS; i++ )
				if ( playeringame[ i ] && players[ i ].mo )
					players[ i ].mo.DamageMobj( NULL, NULL, LARGE_MASS, 'None' );
		}
	}

	States {
	Spawn:
		TNT1 A -1;
		stop;
	}
} // of class OE2BaseWeapon: DoomWeapon {

class OE2HitscanActor: Actor {
	uint hitscanDamage;

	Property BaseDamage: hitscanDamage;

	Default {
		+NOGRAVITY;
		-SOLID;
		+NOINTERACTION;
		+FIXMAPTHINGPOS;
		OE2HitscanActor.BaseDamage 5;
		Scale OE2ScaleFactor * 0.33;
	}

	States {
	Spawn:
		TNT1 A 1;
		stop;
	}
} // of class OE2HitscanActor: Actor {
