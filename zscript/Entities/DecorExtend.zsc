/**
 * Copyright (c) OE2RP Team, 2021
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

class OE2RPDecorationDebris: Actor {
	Default {
		-SOLID;
		-SHOOTABLE;
		Scale 0.05;
		Radius 2;
		Height 1;
	}

	States {
	Spawn:
		TROO A 300;
		TROO A 3 A_FadeOut( 0.05 );
		wait;
	}
}

class OE2Boulder: BaseDecoration {
	const boulderMoveStrength = 6.5; // About 64 mappixels.

	bool movesNow;

	Default {
		+SOLID;
		+SHOOTABLE;
		+BUDDHA;
		+USESPECIAL;
		+QUICKTORETALIATE;
		-NOGRAVITY;

		Activation THINGSPEC_Switch | THINGSPEC_ThingTargets;
		PainChance 256;
		Mass LARGE_MASS;
		Health 0x7FFFFFFF;
		Tag "$OE2RP_E_MBOULDER";
	}

	override void Tick() {
		Super.Tick();

		movesNow = ( vel.length() > 0.001 );

		// Sets next roll sprite if neccesary:
		if ( movesNow && !( level.maptime % ( clamp( 7 - int( vel.length() ), 1, 7 ) ) ) )
			frame = ( frame + 1 ) % 4; // "BLDR ABCD; loop;".
	}

	// Forcing to have the target:
	override int TakeSpecialDamage( Actor inflictor, Actor source, int damage, Name damagetype ) {
		if ( OE2Valin( inflictor ) )
			target = inflictor;
		if ( OE2Valin( source ) )
			target = source;

		OE2Valin pl = OE2Valin( target );

		if ( pl && pl.player.ReadyWeapon && pl.player.ReadyWeapon is 'OE2Staff' )
			A_OE2RP_MoveBoulder();

		return 1;
	}

	override void Activate( Actor activator ) {
		if ( OE2Valin( activator ) ) {
			A_OE2RP_MoveBoulder();

			// Hurt the player if he is pushing boulder:
			if ( !movesNow )
				OE2Valin( activator ).DamageMobj( NULL, NULL, 2, "Crush" );
		}
	}

	override void Deactivate( Actor deactivator ) {
		Activate( deactivator );
	}

	action void A_OE2RP_MoveBoulder( void ) {
		if ( target ) {

			// If boulder isn't moving and if user/attacker is a player:
			if ( !OE2Boulder( self ).movesNow && OE2Valin( target ) ) {
                A_PlaySound("environment/rumble", 200);
				ACS_Execute(3008, 0, 244, 1);

				PlayerInfo pl = OE2Valin( target ).player;

				// Moving boulder only in exact X/Y axes:
				double moveAngle = AngleTo( pl.mo );
				int moveX = -round( cos( moveAngle ) );
				int moveY = -round( sin( moveAngle ) );

				if ( moveX != moveY ) {
					vel.x = boulderMoveStrength * moveX;
					vel.y = boulderMoveStrength * moveY;
				}
			}

			target = NULL;
		} else {
			A_Log( "Boulder <" .. self .. "> (coords " .. pos .. ") moved without target field." );
		}
	}

	States {
	Spawn:
		BLDR A -1 { frame = Random( 0, 3 ); }
		stop;
	}
}
